class Solution {
public:
    static bool comp(vector<int> v1, vector<int> v2) {
        return v1[0] < v2[0];
    }
    
    void printvec(vector<vector<int>>& v) {
        for (auto it : v) {
            cout << it[0] << " " << it[1] << endl;
        }
        cout << endl;
    }
    
    vector<int> partitionLabels(string s) {
        ios::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        unordered_map<char, vector<int>> m;
        for (int i = 0; i < s.length(); i++) {
            if (m.find(s[i]) == m.end()) {
                m[s[i]] = {i, i};
            }
            else m[s[i]][1] = i;
        }
        vector<vector<int>> intervals;
        for (auto it : m) {
            intervals.push_back(it.second);
        }
        sort(intervals.begin(), intervals.end(), comp);
        
        int index = 0;
        vector<vector<int>> ans;
        ans.push_back(intervals[0]);
        for (int i = 1; i < intervals.size(); i++) {
            if (ans[index][1] >= intervals[i][0]) {
                ans[index][0] = min(ans[index][0], intervals[i][0]);
                ans[index][1] = max(ans[index][1], intervals[i][1]);
            }
            else {
                ans.push_back(intervals[i]);
                index++;
            }
        }
        vector<int> ans2;
        for (auto it : ans) {
            ans2.push_back(it[1] - it[0] + 1);
        }
        return ans2;
    }
};